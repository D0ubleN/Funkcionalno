#lang racket

(define (sum numbers)
    (if (empty? numbers) 0
        (+ (first numbers) (sum (rest numbers)))))

(define (member? x items)
  (cond
    [(empty? items) #f]
    [(= x (first items)) #t]
    [else (member? x (rest items))]))

(define (length2 items)
  (define (helper items counter)
    (cond
      [(empty? items) counter]
      [else (helper (rest items) (+ counter 1))]
      ))
  (helper items 0))


(define (list-ref2 items n)
  (if (= n 0) (first items)
      (list-ref (rest items) (- n 1))))

(define (range2 a b)
  (if (= a b) (list)
      (cons a (range2 (+ a 1) b))))

(define (square x) (* x x))

(define (build-list2 n f)
  (define (helper a n f)
  (if (= a n) (list)
      (cons (f a) (helper (+ a 1) n f))))
  (helper 0 n f))

(define (append2 xs ys)
  (if (empty? xs) ys
      (cons (first xs) (append2 (rest xs) ys))))

(define (reverse2 items)
  (define (helper i)
  (if (< i 0) (list)
  (cons (list-ref2 items i) (helper (- i 1)))))
  (helper (- (length2 items) 1)))

(define (take2 n items)
  (cond
    [(empty? items) (list)]
    [(= n 0) (list)]
     [else (cons (first items) (take2 (- n 1) (rest items)))]))

(define (drop2 n items)
  (if (>= n (length2 items)) (list)
      (reverse2 (take2 (-(length2 items) n) (reverse2 items)))))

(define (even? n)
  (if (= 0 (remainder n 2)) #t #f))
  

(define (take-while p items)
  (cond
   [(empty? items) (list)]
   [(not (p (first items))) (list)]
   [else (cons (first items) (take-while p (rest items)))]))

(define (drop-while p items)
  (cond
    [(empty? items) (list)]
    [(not (p (first items))) items]
    [else (drop-while p (rest items))]))


(define (number->list n)
  (define (helper n)
    (if (= n 0) (list)
     (cons (remainder n 10) (helper (quotient n 10)))))
  (reverse2 (helper n)))
  
  

(define (list->number ns)
  (define (helper ns)
  (if (empty? ns) 0
      (+ (* 10 (helper (rest ns))) (first ns))))
  (helper (reverse2 ns)))
